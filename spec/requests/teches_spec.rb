require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/teches', type: :request do
  let!(:autoUser) { create(:user) }
  let!(:token) { JWT.encode({ user_id: autoUser.id }, 's3cr3t') }

  # This should return the minimal set of attributes required to create a valid
  # Tech. As you add validations to Tech, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { 'user_id': autoUser.id, 'title': 'API', 'description': 'hey', 'category': 'fish!', 'price': '20', 'cost': '30' }
  end

  let(:invalid_attributes) do
    { 'user_id': '', 'title': '', 'description': 'helloooo', 'category': 'fish!', 'price': '20', 'cost': '30' }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TechesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    { 'Content-Type' => 'application/json', 'Authorization' => "Bearer #{token}" }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      create(:tech, user_id: autoUser.id)
      get teches_url, headers: valid_headers, as: :json
      expect(response).to be_successful
      expect(ActiveSupport::JSON.decode(response.body)[0]['id']).to eq(autoUser.id)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      tech = create(:tech, user_id: autoUser.id)
      get tech_url(tech), headers: valid_headers, as: :json
      expect(response).to be_successful
      expect(response.body).to match(/"id":#{tech.id}/)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Tech' do
        expect do
          post teches_url,
               params: { tech: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Tech, :count).by(1)
      end

      it 'renders a JSON response with the new tech' do
        post teches_url,
             params: { tech: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(ActiveSupport::JSON.decode(response.body)['id']).to eq(autoUser.id)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Tech' do
        expect do
          post teches_url,
               params: { tech: invalid_attributes }, as: :json
        end.to change(Tech, :count).by(0)
      end

      it 'renders a JSON response with errors for the new tech' do
        post teches_url,
             params: { tech: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.body).to match(/can't be blank/)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { 'title': 'APIdddd', 'description': 'nope' }
      end

      it 'updates the requested tech' do
        tech = create(:tech, user_id: autoUser.id)
        patch tech_url(tech),
              params: { tech: new_attributes }, headers: valid_headers, as: :json
        tech.reload
        expect(response).to have_http_status(:ok)
      end

      it 'renders a JSON response with the tech' do
        tech = create(:tech, user_id: autoUser.id)
        patch tech_url(tech),
              params: { tech: new_attributes }, headers: valid_headers, as: :json
        expect(response.body).to match(/nope/)
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the tech' do
        tech = create(:tech, user_id: autoUser.id)
        patch tech_url(tech),
              params: { tech: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.body).to match(/can't be blank/)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested tech' do
      tech = create(:tech, user_id: autoUser.id)
      expect do
        delete tech_url(tech), headers: valid_headers, as: :json
      end.to change(Tech, :count).by(-1)
    end
  end
end
